
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027b  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000114  00000000  00000000  00000747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f8  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005f2e  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ea  00000000  00000000  0000718a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000019c  00000000  00000000  000073bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	99 d1       	rcall	.+818    	; 0x394 <main>
  62:	9e c1       	rjmp	.+828    	; 0x3a0 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <A_1_5_Wait_x_ms>:
			  
				// Default: Wenn ((State != 0) && (State != 1)) => Fehler: Fall darf bei korrektem Programm nicht auftreten.
			default:
				break;
		}		
	}		
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
  6e:	28 97       	sbiw	r28, 0x08	; 8
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	f8 94       	cli
  74:	de bf       	out	0x3e, r29	; 62
  76:	0f be       	out	0x3f, r0	; 63
  78:	cd bf       	out	0x3d, r28	; 61
  7a:	98 87       	std	Y+8, r25	; 0x08
  7c:	8f 83       	std	Y+7, r24	; 0x07
  7e:	86 ed       	ldi	r24, 0xD6	; 214
  80:	92 e0       	ldi	r25, 0x02	; 2
  82:	9e 83       	std	Y+6, r25	; 0x06
  84:	8d 83       	std	Y+5, r24	; 0x05
  86:	1c 82       	std	Y+4, r1	; 0x04
  88:	1b 82       	std	Y+3, r1	; 0x03
  8a:	14 c0       	rjmp	.+40     	; 0xb4 <A_1_5_Wait_x_ms+0x4e>
  8c:	1a 82       	std	Y+2, r1	; 0x02
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	05 c0       	rjmp	.+10     	; 0x9c <A_1_5_Wait_x_ms+0x36>
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	29 81       	ldd	r18, Y+1	; 0x01
  9e:	3a 81       	ldd	r19, Y+2	; 0x02
  a0:	8d 81       	ldd	r24, Y+5	; 0x05
  a2:	9e 81       	ldd	r25, Y+6	; 0x06
  a4:	28 17       	cp	r18, r24
  a6:	39 07       	cpc	r19, r25
  a8:	a0 f3       	brcs	.-24     	; 0x92 <A_1_5_Wait_x_ms+0x2c>
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	9c 81       	ldd	r25, Y+4	; 0x04
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	9c 83       	std	Y+4, r25	; 0x04
  b2:	8b 83       	std	Y+3, r24	; 0x03
  b4:	2b 81       	ldd	r18, Y+3	; 0x03
  b6:	3c 81       	ldd	r19, Y+4	; 0x04
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	28 f3       	brcs	.-54     	; 0x8c <A_1_5_Wait_x_ms+0x26>
  c2:	00 00       	nop
  c4:	28 96       	adiw	r28, 0x08	; 8
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <A_1_5_5>:

// A_1_5_5: Vorwärts-/Rückwärtszähler über Taster an PB7 und PB6 mit Ausgabe des Zählerstands auf LED.
//          Zustandsautomat erfordert Loslassen der Tasten vor erneuter Betätigung und verhindert,
//          das mehrere Tasten gleichzeitig gedrückt werden.
void A_1_5_5(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <A_1_5_5+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <A_1_5_5+0x8>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  // IHR_CODE_HIER ...
  const int wait = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9c 83       	std	Y+4, r25	; 0x04
  e8:	8b 83       	std	Y+3, r24	; 0x03
  
  // 8-Bit-Variable für den Zähler
  uint8_t Cnt = 0;
  ea:	19 82       	std	Y+1, r1	; 0x01
  // Zustandsvariable: 0 = Nichts gedrückt, 1 = Taste-Up, 2 = Taste-Down, 3 = Taste-Up-and-Down 
  uint8_t State = 0;
  ec:	1a 82       	std	Y+2, r1	; 0x02
  
  // Richtungsbits
  DDRC = 0b11111111;
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
  DDRB = 0b00000000;
  f8:	87 e3       	ldi	r24, 0x37	; 55
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	10 82       	st	Z, r1

  //LED´s auf 0 setzen
  PORTC = ~Cnt;
 100:	85 e3       	ldi	r24, 0x35	; 53
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	20 95       	com	r18
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
  
  while (1)
  {
	  switch (State)
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	91 05       	cpc	r25, r1
 116:	09 f4       	brne	.+2      	; 0x11a <A_1_5_5+0x44>
 118:	6b c0       	rjmp	.+214    	; 0x1f0 <A_1_5_5+0x11a>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	91 05       	cpc	r25, r1
 11e:	1c f4       	brge	.+6      	; 0x126 <A_1_5_5+0x50>
 120:	89 2b       	or	r24, r25
 122:	49 f0       	breq	.+18     	; 0x136 <A_1_5_5+0x60>
				}
				break;
		  
		  // Default: Wenn ((State != 0) && (State != 1)) => Fehler: Fall darf bei korrektem Programm nicht auftreten.
		  default:
				break;
 124:	36 c1       	rjmp	.+620    	; 0x392 <A_1_5_5+0x2bc>
  //LED´s auf 0 setzen
  PORTC = ~Cnt;
  
  while (1)
  {
	  switch (State)
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 05       	cpc	r25, r1
 12a:	09 f4       	brne	.+2      	; 0x12e <A_1_5_5+0x58>
 12c:	a5 c0       	rjmp	.+330    	; 0x278 <A_1_5_5+0x1a2>
 12e:	03 97       	sbiw	r24, 0x03	; 3
 130:	09 f4       	brne	.+2      	; 0x134 <A_1_5_5+0x5e>
 132:	e6 c0       	rjmp	.+460    	; 0x300 <A_1_5_5+0x22a>
				}
				break;
		  
		  // Default: Wenn ((State != 0) && (State != 1)) => Fehler: Fall darf bei korrektem Programm nicht auftreten.
		  default:
				break;
 134:	2e c1       	rjmp	.+604    	; 0x392 <A_1_5_5+0x2bc>
  while (1)
  {
	  switch (State)
	  {
		  case 0:
				if (PINB & (1 << 6) && PINB & (1 << 7)) // Beide Tasten gedrückt aus State nichts
 136:	86 e3       	ldi	r24, 0x36	; 54
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	80 74       	andi	r24, 0x40	; 64
 144:	99 27       	eor	r25, r25
 146:	89 2b       	or	r24, r25
 148:	61 f0       	breq	.+24     	; 0x162 <A_1_5_5+0x8c>
 14a:	86 e3       	ldi	r24, 0x36	; 54
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	34 f4       	brge	.+12     	; 0x162 <A_1_5_5+0x8c>
				{
					State = 3;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	8a 83       	std	Y+2, r24	; 0x02
			  
					A_1_5_Wait_x_ms(wait);
 15a:	8b 81       	ldd	r24, Y+3	; 0x03
 15c:	9c 81       	ldd	r25, Y+4	; 0x04
 15e:	83 df       	rcall	.-250    	; 0x66 <A_1_5_Wait_x_ms>
 160:	46 c0       	rjmp	.+140    	; 0x1ee <A_1_5_5+0x118>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7))) // Taste-Down gedrückt aus State nichts
 162:	86 e3       	ldi	r24, 0x36	; 54
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	80 74       	andi	r24, 0x40	; 64
 170:	99 27       	eor	r25, r25
 172:	89 2b       	or	r24, r25
 174:	c1 f0       	breq	.+48     	; 0x1a6 <A_1_5_5+0xd0>
 176:	86 e3       	ldi	r24, 0x36	; 54
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	94 f0       	brlt	.+36     	; 0x1a6 <A_1_5_5+0xd0>
				{
					if(Cnt > 0){
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 23       	and	r24, r24
 186:	19 f0       	breq	.+6      	; 0x18e <A_1_5_5+0xb8>
						Cnt--;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	89 83       	std	Y+1, r24	; 0x01
					}

					State = 2;
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	8a 83       	std	Y+2, r24	; 0x02

					PORTC = ~Cnt;
 192:	85 e3       	ldi	r24, 0x35	; 53
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	20 95       	com	r18
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
					
					A_1_5_Wait_x_ms(wait);
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	61 df       	rcall	.-318    	; 0x66 <A_1_5_Wait_x_ms>
 1a4:	24 c0       	rjmp	.+72     	; 0x1ee <A_1_5_5+0x118>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6))) // Taste-Up gedrückt aus State nichts
 1a6:	86 e3       	ldi	r24, 0x36	; 54
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <A_1_5_5+0xde>
 1b2:	e8 c0       	rjmp	.+464    	; 0x384 <A_1_5_5+0x2ae>
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	80 74       	andi	r24, 0x40	; 64
 1c2:	99 27       	eor	r25, r25
 1c4:	89 2b       	or	r24, r25
 1c6:	09 f0       	breq	.+2      	; 0x1ca <A_1_5_5+0xf4>
 1c8:	dd c0       	rjmp	.+442    	; 0x384 <A_1_5_5+0x2ae>
				{
					if(Cnt < 255){
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	8f 3f       	cpi	r24, 0xFF	; 255
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <A_1_5_5+0x100>
						Cnt++;
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	89 83       	std	Y+1, r24	; 0x01
					}

					State = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8a 83       	std	Y+2, r24	; 0x02

					PORTC = ~Cnt;
 1da:	85 e3       	ldi	r24, 0x35	; 53
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	29 81       	ldd	r18, Y+1	; 0x01
 1e0:	20 95       	com	r18
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
					
					A_1_5_Wait_x_ms(wait);
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ea:	3d df       	rcall	.-390    	; 0x66 <A_1_5_Wait_x_ms>
				}
				break;
 1ec:	cb c0       	rjmp	.+406    	; 0x384 <A_1_5_5+0x2ae>
 1ee:	ca c0       	rjmp	.+404    	; 0x384 <A_1_5_5+0x2ae>
		  case 1:
				if (!(PINB & (1 << 7)) && !(PINB & (1 << 6)))
 1f0:	86 e3       	ldi	r24, 0x36	; 54
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	7c f0       	brlt	.+30     	; 0x21a <A_1_5_5+0x144>
 1fc:	86 e3       	ldi	r24, 0x36	; 54
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	80 74       	andi	r24, 0x40	; 64
 20a:	99 27       	eor	r25, r25
 20c:	89 2b       	or	r24, r25
 20e:	29 f4       	brne	.+10     	; 0x21a <A_1_5_5+0x144>
				{
					State = 0;

					A_1_5_Wait_x_ms(wait);
 210:	1a 82       	std	Y+2, r1	; 0x02
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	9c 81       	ldd	r25, Y+4	; 0x04
 216:	27 df       	rcall	.-434    	; 0x66 <A_1_5_Wait_x_ms>
 218:	2e c0       	rjmp	.+92     	; 0x276 <A_1_5_5+0x1a0>
				}
				else if (PINB & (1 << 6) && PINB & (1 << 7))
 21a:	86 e3       	ldi	r24, 0x36	; 54
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	80 74       	andi	r24, 0x40	; 64
 228:	99 27       	eor	r25, r25
 22a:	89 2b       	or	r24, r25
 22c:	61 f0       	breq	.+24     	; 0x246 <A_1_5_5+0x170>
 22e:	86 e3       	ldi	r24, 0x36	; 54
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	34 f4       	brge	.+12     	; 0x246 <A_1_5_5+0x170>
				{
					State = 3;
 23a:	83 e0       	ldi	r24, 0x03	; 3

					A_1_5_Wait_x_ms(wait);
 23c:	8a 83       	std	Y+2, r24	; 0x02
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04
 242:	11 df       	rcall	.-478    	; 0x66 <A_1_5_Wait_x_ms>
 244:	18 c0       	rjmp	.+48     	; 0x276 <A_1_5_5+0x1a0>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7)))
 246:	86 e3       	ldi	r24, 0x36	; 54
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	80 74       	andi	r24, 0x40	; 64
 254:	99 27       	eor	r25, r25
 256:	89 2b       	or	r24, r25
 258:	09 f4       	brne	.+2      	; 0x25c <A_1_5_5+0x186>
 25a:	96 c0       	rjmp	.+300    	; 0x388 <A_1_5_5+0x2b2>
 25c:	86 e3       	ldi	r24, 0x36	; 54
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	fc 01       	movw	r30, r24
 262:	80 81       	ld	r24, Z
 264:	88 23       	and	r24, r24
 266:	0c f4       	brge	.+2      	; 0x26a <A_1_5_5+0x194>
				{
					State = 2;
 268:	8f c0       	rjmp	.+286    	; 0x388 <A_1_5_5+0x2b2>
 26a:	82 e0       	ldi	r24, 0x02	; 2

					A_1_5_Wait_x_ms(wait);
 26c:	8a 83       	std	Y+2, r24	; 0x02
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	9c 81       	ldd	r25, Y+4	; 0x04
 272:	f9 de       	rcall	.-526    	; 0x66 <A_1_5_Wait_x_ms>
				}
				break;
 274:	89 c0       	rjmp	.+274    	; 0x388 <A_1_5_5+0x2b2>
 276:	88 c0       	rjmp	.+272    	; 0x388 <A_1_5_5+0x2b2>
		case 2:
				if (!(PINB & (1 << 7)) && !(PINB & (1 << 6)))
 278:	86 e3       	ldi	r24, 0x36	; 54
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	7c f0       	brlt	.+30     	; 0x2a2 <A_1_5_5+0x1cc>
 284:	86 e3       	ldi	r24, 0x36	; 54
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	88 2f       	mov	r24, r24
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 74       	andi	r24, 0x40	; 64
 292:	99 27       	eor	r25, r25
 294:	89 2b       	or	r24, r25
				{
					State = 0;
 296:	29 f4       	brne	.+10     	; 0x2a2 <A_1_5_5+0x1cc>

					A_1_5_Wait_x_ms(wait);
 298:	1a 82       	std	Y+2, r1	; 0x02
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	9c 81       	ldd	r25, Y+4	; 0x04
 29e:	e3 de       	rcall	.-570    	; 0x66 <A_1_5_Wait_x_ms>
 2a0:	2e c0       	rjmp	.+92     	; 0x2fe <A_1_5_5+0x228>
				}
				else if (PINB & (1 << 6) && PINB & (1 << 7))
 2a2:	86 e3       	ldi	r24, 0x36	; 54
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	80 81       	ld	r24, Z
 2aa:	88 2f       	mov	r24, r24
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	80 74       	andi	r24, 0x40	; 64
 2b0:	99 27       	eor	r25, r25
 2b2:	89 2b       	or	r24, r25
 2b4:	61 f0       	breq	.+24     	; 0x2ce <A_1_5_5+0x1f8>
 2b6:	86 e3       	ldi	r24, 0x36	; 54
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
				{
					State = 3;
 2c0:	34 f4       	brge	.+12     	; 0x2ce <A_1_5_5+0x1f8>
 2c2:	83 e0       	ldi	r24, 0x03	; 3

					A_1_5_Wait_x_ms(wait);
 2c4:	8a 83       	std	Y+2, r24	; 0x02
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ca:	cd de       	rcall	.-614    	; 0x66 <A_1_5_Wait_x_ms>
 2cc:	18 c0       	rjmp	.+48     	; 0x2fe <A_1_5_5+0x228>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))
 2ce:	86 e3       	ldi	r24, 0x36	; 54
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	88 23       	and	r24, r24
 2d8:	0c f0       	brlt	.+2      	; 0x2dc <A_1_5_5+0x206>
 2da:	58 c0       	rjmp	.+176    	; 0x38c <A_1_5_5+0x2b6>
 2dc:	86 e3       	ldi	r24, 0x36	; 54
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	80 81       	ld	r24, Z
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	80 74       	andi	r24, 0x40	; 64
 2ea:	99 27       	eor	r25, r25
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <A_1_5_5+0x21c>
				{
					State = 1;
 2f0:	4d c0       	rjmp	.+154    	; 0x38c <A_1_5_5+0x2b6>
 2f2:	81 e0       	ldi	r24, 0x01	; 1

					A_1_5_Wait_x_ms(wait);
 2f4:	8a 83       	std	Y+2, r24	; 0x02
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	9c 81       	ldd	r25, Y+4	; 0x04
 2fa:	b5 de       	rcall	.-662    	; 0x66 <A_1_5_Wait_x_ms>
				}
				break;
 2fc:	47 c0       	rjmp	.+142    	; 0x38c <A_1_5_5+0x2b6>
 2fe:	46 c0       	rjmp	.+140    	; 0x38c <A_1_5_5+0x2b6>
		case 3:
				if (!(PINB & (1 << 7)) && !(PINB & (1 << 6)))
 300:	86 e3       	ldi	r24, 0x36	; 54
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	80 81       	ld	r24, Z
 308:	88 23       	and	r24, r24
 30a:	7c f0       	brlt	.+30     	; 0x32a <A_1_5_5+0x254>
 30c:	86 e3       	ldi	r24, 0x36	; 54
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	80 74       	andi	r24, 0x40	; 64
 31a:	99 27       	eor	r25, r25
 31c:	89 2b       	or	r24, r25
				{
					State = 0;
 31e:	29 f4       	brne	.+10     	; 0x32a <A_1_5_5+0x254>

					A_1_5_Wait_x_ms(wait);
 320:	1a 82       	std	Y+2, r1	; 0x02
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	9c 81       	ldd	r25, Y+4	; 0x04
 326:	9f de       	rcall	.-706    	; 0x66 <A_1_5_Wait_x_ms>
 328:	2c c0       	rjmp	.+88     	; 0x382 <A_1_5_5+0x2ac>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7)))
 32a:	86 e3       	ldi	r24, 0x36	; 54
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	80 81       	ld	r24, Z
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	80 74       	andi	r24, 0x40	; 64
 338:	99 27       	eor	r25, r25
 33a:	89 2b       	or	r24, r25
 33c:	61 f0       	breq	.+24     	; 0x356 <A_1_5_5+0x280>
 33e:	86 e3       	ldi	r24, 0x36	; 54
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	88 23       	and	r24, r24
				{
					State = 2;
 348:	34 f0       	brlt	.+12     	; 0x356 <A_1_5_5+0x280>
 34a:	82 e0       	ldi	r24, 0x02	; 2

					A_1_5_Wait_x_ms(wait);
 34c:	8a 83       	std	Y+2, r24	; 0x02
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	9c 81       	ldd	r25, Y+4	; 0x04
 352:	89 de       	rcall	.-750    	; 0x66 <A_1_5_Wait_x_ms>
 354:	16 c0       	rjmp	.+44     	; 0x382 <A_1_5_5+0x2ac>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))
 356:	86 e3       	ldi	r24, 0x36	; 54
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	88 23       	and	r24, r24
 360:	bc f4       	brge	.+46     	; 0x390 <A_1_5_5+0x2ba>
 362:	86 e3       	ldi	r24, 0x36	; 54
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	80 74       	andi	r24, 0x40	; 64
 370:	99 27       	eor	r25, r25
 372:	89 2b       	or	r24, r25
				{
					State = 1;
 374:	69 f4       	brne	.+26     	; 0x390 <A_1_5_5+0x2ba>
 376:	81 e0       	ldi	r24, 0x01	; 1

					A_1_5_Wait_x_ms(wait);
 378:	8a 83       	std	Y+2, r24	; 0x02
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	9c 81       	ldd	r25, Y+4	; 0x04
 37e:	73 de       	rcall	.-794    	; 0x66 <A_1_5_Wait_x_ms>
				}
				break;
 380:	07 c0       	rjmp	.+14     	; 0x390 <A_1_5_5+0x2ba>
 382:	06 c0       	rjmp	.+12     	; 0x390 <A_1_5_5+0x2ba>

					PORTC = ~Cnt;
					
					A_1_5_Wait_x_ms(wait);
				}
				break;
 384:	00 00       	nop
 386:	c2 ce       	rjmp	.-636    	; 0x10c <A_1_5_5+0x36>
				{
					State = 2;

					A_1_5_Wait_x_ms(wait);
				}
				break;
 388:	00 00       	nop
 38a:	c0 ce       	rjmp	.-640    	; 0x10c <A_1_5_5+0x36>
				{
					State = 1;

					A_1_5_Wait_x_ms(wait);
				}
				break;
 38c:	00 00       	nop
 38e:	be ce       	rjmp	.-644    	; 0x10c <A_1_5_5+0x36>
				{
					State = 1;

					A_1_5_Wait_x_ms(wait);
				}
				break;
 390:	00 00       	nop
		  
		  // Default: Wenn ((State != 0) && (State != 1)) => Fehler: Fall darf bei korrektem Programm nicht auftreten.
		  default:
				break;
	  }
  }
 392:	bc ce       	rjmp	.-648    	; 0x10c <A_1_5_5+0x36>

00000394 <main>:
#include "MPT_LAB_MAIN.h"
#include "Labor_1/MPT_Lab_1.h"


int main(void)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
  //------------------------------------------------------------------------------
  //A_1_5_1();
  //A_1_5_2();
  //A_1_5_3();
  //A_1_5_4();
  A_1_5_5();
 39c:	9c de       	rcall	.-712    	; 0xd6 <A_1_5_5>


  while(1)
  {
      // Wir machen nichts (mehr)...
  }
 39e:	ff cf       	rjmp	.-2      	; 0x39e <main+0xa>

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
