
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027b  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000114  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088e  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005f2e  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ea  00000000  00000000  000070e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000072cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000019c  00000000  00000000  00007314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	78 d1       	rcall	.+752    	; 0x352 <main>
  62:	7d c1       	rjmp	.+762    	; 0x35e <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <A_1_5_Wait_x_ms>:
			  
				// Default: Wenn ((State != 0) && (State != 1)) => Fehler: Fall darf bei korrektem Programm nicht auftreten.
			default:
				break;
		}		
	}		
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
  6e:	28 97       	sbiw	r28, 0x08	; 8
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	f8 94       	cli
  74:	de bf       	out	0x3e, r29	; 62
  76:	0f be       	out	0x3f, r0	; 63
  78:	cd bf       	out	0x3d, r28	; 61
  7a:	98 87       	std	Y+8, r25	; 0x08
  7c:	8f 83       	std	Y+7, r24	; 0x07
  7e:	86 ed       	ldi	r24, 0xD6	; 214
  80:	92 e0       	ldi	r25, 0x02	; 2
  82:	9e 83       	std	Y+6, r25	; 0x06
  84:	8d 83       	std	Y+5, r24	; 0x05
  86:	1c 82       	std	Y+4, r1	; 0x04
  88:	1b 82       	std	Y+3, r1	; 0x03
  8a:	14 c0       	rjmp	.+40     	; 0xb4 <A_1_5_Wait_x_ms+0x4e>
  8c:	1a 82       	std	Y+2, r1	; 0x02
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	05 c0       	rjmp	.+10     	; 0x9c <A_1_5_Wait_x_ms+0x36>
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	9a 81       	ldd	r25, Y+2	; 0x02
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	29 81       	ldd	r18, Y+1	; 0x01
  9e:	3a 81       	ldd	r19, Y+2	; 0x02
  a0:	8d 81       	ldd	r24, Y+5	; 0x05
  a2:	9e 81       	ldd	r25, Y+6	; 0x06
  a4:	28 17       	cp	r18, r24
  a6:	39 07       	cpc	r19, r25
  a8:	a0 f3       	brcs	.-24     	; 0x92 <A_1_5_Wait_x_ms+0x2c>
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	9c 81       	ldd	r25, Y+4	; 0x04
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	9c 83       	std	Y+4, r25	; 0x04
  b2:	8b 83       	std	Y+3, r24	; 0x03
  b4:	2b 81       	ldd	r18, Y+3	; 0x03
  b6:	3c 81       	ldd	r19, Y+4	; 0x04
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	28 f3       	brcs	.-54     	; 0x8c <A_1_5_Wait_x_ms+0x26>
  c2:	00 00       	nop
  c4:	28 96       	adiw	r28, 0x08	; 8
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <A_1_5_5>:

// A_1_5_5: Vorwärts-/Rückwärtszähler über Taster an PB7 und PB6 mit Ausgabe des Zählerstands auf LED.
//          Zustandsautomat erfordert Loslassen der Tasten vor erneuter Betätigung und verhindert,
//          das mehrere Tasten gleichzeitig gedrückt werden.
void A_1_5_5(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <A_1_5_5+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <A_1_5_5+0x8>
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	// IHR_CODE_HIER ...
	const int wait = 1;													// Konstante für Wartezeit 50ms, um Prellen zu vermeiden
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9c 83       	std	Y+4, r25	; 0x04
  e8:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t Cnt = 0;													// 8-Bit-Variable für den Zähler
  ea:	19 82       	std	Y+1, r1	; 0x01
	uint8_t State = 0;													// Zustandsvariable: 0 = Nichts gedrückt, 1 = Taste-Up, 2 = Taste-Down, 3 = Taste-Up-and-Down
  ec:	1a 82       	std	Y+2, r1	; 0x02
	
	DDRC = 0b11111111;													// Richtungsbits setezen PC = Ausgang
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	DDRB = 0b00000000;													// Richtungsbits setezen PB = Eingang
  f8:	87 e3       	ldi	r24, 0x37	; 55
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	10 82       	st	Z, r1

	PORTC = ~Cnt;														//LED´s auf 0 setzen
 100:	85 e3       	ldi	r24, 0x35	; 53
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	20 95       	com	r18
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	
	while (1)
	{
		switch (State)
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	91 05       	cpc	r25, r1
 116:	09 f4       	brne	.+2      	; 0x11a <A_1_5_5+0x44>
 118:	62 c0       	rjmp	.+196    	; 0x1de <A_1_5_5+0x108>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	91 05       	cpc	r25, r1
 11e:	1c f4       	brge	.+6      	; 0x126 <A_1_5_5+0x50>
 120:	89 2b       	or	r24, r25
 122:	49 f0       	breq	.+18     	; 0x136 <A_1_5_5+0x60>
				{
					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
				}
				break;
			default:
				break;													// Default: Wenn State == 1|2|3|4 => Fehler: Fall darf bei korrektem Programm nicht auftreten.
 124:	12 c1       	rjmp	.+548    	; 0x34a <A_1_5_5+0x274>

	PORTC = ~Cnt;														//LED´s auf 0 setzen
	
	while (1)
	{
		switch (State)
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 05       	cpc	r25, r1
 12a:	09 f4       	brne	.+2      	; 0x12e <A_1_5_5+0x58>
 12c:	93 c0       	rjmp	.+294    	; 0x254 <A_1_5_5+0x17e>
 12e:	03 97       	sbiw	r24, 0x03	; 3
 130:	09 f4       	brne	.+2      	; 0x134 <A_1_5_5+0x5e>
 132:	cb c0       	rjmp	.+406    	; 0x2ca <A_1_5_5+0x1f4>
				{
					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
				}
				break;
			default:
				break;													// Default: Wenn State == 1|2|3|4 => Fehler: Fall darf bei korrektem Programm nicht auftreten.
 134:	0a c1       	rjmp	.+532    	; 0x34a <A_1_5_5+0x274>
	while (1)
	{
		switch (State)
		{
			case 0:
				if (PINB & (1 << 6) && PINB & (1 << 7))					// Beide Tasten gedrückt aus State nichts Gedrückt
 136:	86 e3       	ldi	r24, 0x36	; 54
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	80 74       	andi	r24, 0x40	; 64
 144:	99 27       	eor	r25, r25
 146:	89 2b       	or	r24, r25
 148:	49 f0       	breq	.+18     	; 0x15c <A_1_5_5+0x86>
 14a:	86 e3       	ldi	r24, 0x36	; 54
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	1c f4       	brge	.+6      	; 0x15c <A_1_5_5+0x86>
				{
					State = 3;											// State 3 setzen, da State 3 = Beide Tasten gedrückt
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	8a 83       	std	Y+2, r24	; 0x02
 15a:	40 c0       	rjmp	.+128    	; 0x1dc <A_1_5_5+0x106>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7)))			// Taste-Down gedrückt aus State nichts Gedrückt
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	80 74       	andi	r24, 0x40	; 64
 16a:	99 27       	eor	r25, r25
 16c:	89 2b       	or	r24, r25
 16e:	a9 f0       	breq	.+42     	; 0x19a <A_1_5_5+0xc4>
 170:	86 e3       	ldi	r24, 0x36	; 54
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	7c f0       	brlt	.+30     	; 0x19a <A_1_5_5+0xc4>
				{
					if(Cnt > 0){										// Untere Grenze des Zählers festlegen = 0
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	88 23       	and	r24, r24
 180:	19 f0       	breq	.+6      	; 0x188 <A_1_5_5+0xb2>
						Cnt--;											// Zähler dekrementieren
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	81 50       	subi	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01
					}

					State = 2;											// State 2 setzen, da State 2 = Down-Taste gedrückt
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	8a 83       	std	Y+2, r24	; 0x02

					PORTC = ~Cnt;										// LED´s updaten
 18c:	85 e3       	ldi	r24, 0x35	; 53
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	20 95       	com	r18
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
 198:	21 c0       	rjmp	.+66     	; 0x1dc <A_1_5_5+0x106>
				}	
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))			// Taste-Up gedrückt aus State nichts Gedrückt
 19a:	86 e3       	ldi	r24, 0x36	; 54
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	0c f0       	brlt	.+2      	; 0x1a8 <A_1_5_5+0xd2>
 1a6:	ca c0       	rjmp	.+404    	; 0x33c <A_1_5_5+0x266>
 1a8:	86 e3       	ldi	r24, 0x36	; 54
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	80 74       	andi	r24, 0x40	; 64
 1b6:	99 27       	eor	r25, r25
 1b8:	89 2b       	or	r24, r25
 1ba:	09 f0       	breq	.+2      	; 0x1be <A_1_5_5+0xe8>
 1bc:	bf c0       	rjmp	.+382    	; 0x33c <A_1_5_5+0x266>
				{	
					if(Cnt < 255){										// Obere Grenze des Zählers festlegen = 255
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	8f 3f       	cpi	r24, 0xFF	; 255
 1c2:	19 f0       	breq	.+6      	; 0x1ca <A_1_5_5+0xf4>
						Cnt++;											// Zähler inkrementieren
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	89 83       	std	Y+1, r24	; 0x01
					}

					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	8a 83       	std	Y+2, r24	; 0x02

					PORTC = ~Cnt;										// LED´s updaten
 1ce:	85 e3       	ldi	r24, 0x35	; 53
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	29 81       	ldd	r18, Y+1	; 0x01
 1d4:	20 95       	com	r18
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
				}
				break;
 1da:	b0 c0       	rjmp	.+352    	; 0x33c <A_1_5_5+0x266>
 1dc:	af c0       	rjmp	.+350    	; 0x33c <A_1_5_5+0x266>
			case 1:
				if (!(PINB & (1 << 7)) && !(PINB & (1 << 6)))			// Beide Tasten nicht gedrückt aus State Up-Taste gedrückt
 1de:	86 e3       	ldi	r24, 0x36	; 54
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	64 f0       	brlt	.+24     	; 0x202 <A_1_5_5+0x12c>
 1ea:	86 e3       	ldi	r24, 0x36	; 54
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	88 2f       	mov	r24, r24
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	80 74       	andi	r24, 0x40	; 64
 1f8:	99 27       	eor	r25, r25
 1fa:	89 2b       	or	r24, r25
 1fc:	11 f4       	brne	.+4      	; 0x202 <A_1_5_5+0x12c>
				{
					State = 0;											// State 0 setzen, da State 0 = Beide Tasten nicht gedrückt
 1fe:	1a 82       	std	Y+2, r1	; 0x02
 200:	28 c0       	rjmp	.+80     	; 0x252 <A_1_5_5+0x17c>
				}
				else if (PINB & (1 << 6) && PINB & (1 << 7))			// Beide Tasten gedrückt aus State Up-Taste gedrückt
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	88 2f       	mov	r24, r24
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	80 74       	andi	r24, 0x40	; 64
 210:	99 27       	eor	r25, r25
 212:	89 2b       	or	r24, r25
 214:	49 f0       	breq	.+18     	; 0x228 <A_1_5_5+0x152>
 216:	86 e3       	ldi	r24, 0x36	; 54
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	88 23       	and	r24, r24
 220:	1c f4       	brge	.+6      	; 0x228 <A_1_5_5+0x152>
				{
					State = 3;											// State 3 setzen, da State 3 = Beide Tasten gedrückt
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	8a 83       	std	Y+2, r24	; 0x02
 226:	15 c0       	rjmp	.+42     	; 0x252 <A_1_5_5+0x17c>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7)))			// Taste-Down gedrückt aus State Up-Taste gedrückt
 228:	86 e3       	ldi	r24, 0x36	; 54
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	80 81       	ld	r24, Z
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	80 74       	andi	r24, 0x40	; 64
 236:	99 27       	eor	r25, r25
 238:	89 2b       	or	r24, r25
 23a:	09 f4       	brne	.+2      	; 0x23e <A_1_5_5+0x168>
 23c:	81 c0       	rjmp	.+258    	; 0x340 <A_1_5_5+0x26a>
 23e:	86 e3       	ldi	r24, 0x36	; 54
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	80 81       	ld	r24, Z
 246:	88 23       	and	r24, r24
 248:	0c f4       	brge	.+2      	; 0x24c <A_1_5_5+0x176>
 24a:	7a c0       	rjmp	.+244    	; 0x340 <A_1_5_5+0x26a>
				{
					State = 2;											// State 2 setzen, da State 2 = Down-Taste gedrückt
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	8a 83       	std	Y+2, r24	; 0x02
				}
				break;
 250:	77 c0       	rjmp	.+238    	; 0x340 <A_1_5_5+0x26a>
 252:	76 c0       	rjmp	.+236    	; 0x340 <A_1_5_5+0x26a>
			case 2:
				if (!(PINB & (1 << 7)) && !(PINB & (1 << 6)))			// Beide Tasten nicht gedrückt aus State Down-Taste gedrückt
 254:	86 e3       	ldi	r24, 0x36	; 54
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	88 23       	and	r24, r24
 25e:	64 f0       	brlt	.+24     	; 0x278 <A_1_5_5+0x1a2>
 260:	86 e3       	ldi	r24, 0x36	; 54
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	80 81       	ld	r24, Z
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	80 74       	andi	r24, 0x40	; 64
 26e:	99 27       	eor	r25, r25
 270:	89 2b       	or	r24, r25
 272:	11 f4       	brne	.+4      	; 0x278 <A_1_5_5+0x1a2>
				{
					State = 0;											// State 0 setzen, da State 0 = Beide Tasten nicht gedrückt
 274:	1a 82       	std	Y+2, r1	; 0x02
 276:	28 c0       	rjmp	.+80     	; 0x2c8 <A_1_5_5+0x1f2>
				}
				else if (PINB & (1 << 6) && PINB & (1 << 7))			// Beide Tasten gedrückt aus State Down-Taste gedrückt
 278:	86 e3       	ldi	r24, 0x36	; 54
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	80 74       	andi	r24, 0x40	; 64
 286:	99 27       	eor	r25, r25
 288:	89 2b       	or	r24, r25
 28a:	49 f0       	breq	.+18     	; 0x29e <A_1_5_5+0x1c8>
 28c:	86 e3       	ldi	r24, 0x36	; 54
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	1c f4       	brge	.+6      	; 0x29e <A_1_5_5+0x1c8>
				{
					State = 3;											// State 3 setzen, da State 3 = Beide Tasten gedrückt
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	8a 83       	std	Y+2, r24	; 0x02
 29c:	15 c0       	rjmp	.+42     	; 0x2c8 <A_1_5_5+0x1f2>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))			// Taste-Up gedrückt aus State Down-Taste gedrückt
 29e:	86 e3       	ldi	r24, 0x36	; 54
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	0c f0       	brlt	.+2      	; 0x2ac <A_1_5_5+0x1d6>
 2aa:	4c c0       	rjmp	.+152    	; 0x344 <A_1_5_5+0x26e>
 2ac:	86 e3       	ldi	r24, 0x36	; 54
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	80 74       	andi	r24, 0x40	; 64
 2ba:	99 27       	eor	r25, r25
 2bc:	89 2b       	or	r24, r25
 2be:	09 f0       	breq	.+2      	; 0x2c2 <A_1_5_5+0x1ec>
 2c0:	41 c0       	rjmp	.+130    	; 0x344 <A_1_5_5+0x26e>
				{
					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	8a 83       	std	Y+2, r24	; 0x02
				}
				break;
 2c6:	3e c0       	rjmp	.+124    	; 0x344 <A_1_5_5+0x26e>
 2c8:	3d c0       	rjmp	.+122    	; 0x344 <A_1_5_5+0x26e>
			case 3:
				if (!(PINB & (1 << 7)) && !(PINB & (1 << 6)))			// Beide Tasten nicht gedrückt aus State beide Tasten gedrückt
 2ca:	86 e3       	ldi	r24, 0x36	; 54
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	64 f0       	brlt	.+24     	; 0x2ee <A_1_5_5+0x218>
 2d6:	86 e3       	ldi	r24, 0x36	; 54
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	80 81       	ld	r24, Z
 2de:	88 2f       	mov	r24, r24
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	80 74       	andi	r24, 0x40	; 64
 2e4:	99 27       	eor	r25, r25
 2e6:	89 2b       	or	r24, r25
 2e8:	11 f4       	brne	.+4      	; 0x2ee <A_1_5_5+0x218>
				{
					State = 0;											// State 0 setzen, da State 0 = Beide Tasten nicht gedrückt
 2ea:	1a 82       	std	Y+2, r1	; 0x02
 2ec:	26 c0       	rjmp	.+76     	; 0x33a <A_1_5_5+0x264>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7)))			// Taste-Down gedrückt aus State beide Tasten gedrückt
 2ee:	86 e3       	ldi	r24, 0x36	; 54
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	88 2f       	mov	r24, r24
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	80 74       	andi	r24, 0x40	; 64
 2fc:	99 27       	eor	r25, r25
 2fe:	89 2b       	or	r24, r25
 300:	49 f0       	breq	.+18     	; 0x314 <A_1_5_5+0x23e>
 302:	86 e3       	ldi	r24, 0x36	; 54
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	88 23       	and	r24, r24
 30c:	1c f0       	brlt	.+6      	; 0x314 <A_1_5_5+0x23e>
				{
					State = 2;											// State 2 setzen, da State 2 = Down-Taste gedrückt
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	13 c0       	rjmp	.+38     	; 0x33a <A_1_5_5+0x264>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))			// Taste-Up gedrückt aus State beide Tasten gedrückt
 314:	86 e3       	ldi	r24, 0x36	; 54
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	80 81       	ld	r24, Z
 31c:	88 23       	and	r24, r24
 31e:	a4 f4       	brge	.+40     	; 0x348 <A_1_5_5+0x272>
 320:	86 e3       	ldi	r24, 0x36	; 54
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	80 81       	ld	r24, Z
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	80 74       	andi	r24, 0x40	; 64
 32e:	99 27       	eor	r25, r25
 330:	89 2b       	or	r24, r25
 332:	51 f4       	brne	.+20     	; 0x348 <A_1_5_5+0x272>
				{
					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	8a 83       	std	Y+2, r24	; 0x02
				}
				break;
 338:	07 c0       	rjmp	.+14     	; 0x348 <A_1_5_5+0x272>
 33a:	06 c0       	rjmp	.+12     	; 0x348 <A_1_5_5+0x272>

					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt

					PORTC = ~Cnt;										// LED´s updaten
				}
				break;
 33c:	00 00       	nop
 33e:	05 c0       	rjmp	.+10     	; 0x34a <A_1_5_5+0x274>
				}
				else if (PINB & (1 << 6) && !(PINB & (1 << 7)))			// Taste-Down gedrückt aus State Up-Taste gedrückt
				{
					State = 2;											// State 2 setzen, da State 2 = Down-Taste gedrückt
				}
				break;
 340:	00 00       	nop
 342:	03 c0       	rjmp	.+6      	; 0x34a <A_1_5_5+0x274>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))			// Taste-Up gedrückt aus State Down-Taste gedrückt
				{
					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
				}
				break;
 344:	00 00       	nop
 346:	01 c0       	rjmp	.+2      	; 0x34a <A_1_5_5+0x274>
				}
				else if (PINB & (1 << 7) && !(PINB & (1 << 6)))			// Taste-Up gedrückt aus State beide Tasten gedrückt
				{
					State = 1;											// State 1 setzen, da State 1 = Up-Taste gedrückt
				}
				break;
 348:	00 00       	nop
			default:
				break;													// Default: Wenn State == 1|2|3|4 => Fehler: Fall darf bei korrektem Programm nicht auftreten.
		}
		
		A_1_5_Wait_x_ms(wait);											// Wartezeit einfügen um Prellen zu vermeiden
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	9c 81       	ldd	r25, Y+4	; 0x04
 34e:	8b de       	rcall	.-746    	; 0x66 <A_1_5_Wait_x_ms>
	}
 350:	dd ce       	rjmp	.-582    	; 0x10c <A_1_5_5+0x36>

00000352 <main>:
#include "MPT_LAB_MAIN.h"
#include "Labor_1/MPT_Lab_1.h"


int main(void)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
  //------------------------------------------------------------------------------
  //A_1_5_1();
  //A_1_5_2();
  //A_1_5_3();
  //A_1_5_4();
  A_1_5_5();
 35a:	bd de       	rcall	.-646    	; 0xd6 <A_1_5_5>


  while(1)
  {
      // Wir machen nichts (mehr)...
  }
 35c:	ff cf       	rjmp	.-2      	; 0x35c <main+0xa>

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
