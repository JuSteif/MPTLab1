
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000011d  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009d  00000000  00000000  000002b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005ed8  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00006861  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000208e  00000000  00000000  00006889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	11 d0       	rcall	.+34     	; 0x84 <main>
  62:	16 c0       	rjmp	.+44     	; 0x90 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <A_1_1_2>:

//##############################################################################

// A_1_1_2: Jede zweite LED (LED_0, LED_2, LED_4, LED_6) einschalten.
void A_1_1_2(void)
{
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
	// Datenrichtungsbit = '0' => Eingang 
	// Datenrichtungsbits 7,5,3,1: Eingang
	// Datenrichtungsbits 6,4,2,0: Ausgang
  // IHR_CODE_HIER ...
  
	DDRC = 0b01010101;
  6e:	84 e3       	ldi	r24, 0x34	; 52
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	25 e5       	ldi	r18, 0x55	; 85
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
	// muss zur Aktivierung einer LED der Ausgang invers gesetzt werden, d.h. logisch '0'.
	// Portbits 0,2,4,6:   '0' setzen => LEDs ein.
	// Portbits 7,5,3,1: kein Einfluss, da als Eingang geschaltet (s.o. DDRC)
  // IHR_CODE_HIER ...
  
	PORTC = 0xff;
  78:	85 e3       	ldi	r24, 0x35	; 53
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	fc 01       	movw	r30, r24
  80:	20 83       	st	Z, r18
	
	while(1)
	{
	}
  82:	ff cf       	rjmp	.-2      	; 0x82 <A_1_1_2+0x1c>

00000084 <main>:
#include "MPT_LAB_MAIN.h"
#include "Labor_1/MPT_Lab_1.h"


int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  // Aufgabe A_1_1: Einfache digitale Portausgabe (LED)
  // A_1_1_1: Erste LED (LED_0) einschalten.
  // A_1_1_2: Jede zweite LED (LED_0, LED_2, LED_4, LED_6) einschalten.
  //------------------------------------------------------------------------------
  //A_1_1_1();
  A_1_1_2();
  8c:	ec df       	rcall	.-40     	; 0x66 <A_1_1_2>


  while(1)
  {
      // Wir machen nichts (mehr)...
  }
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0xa>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
